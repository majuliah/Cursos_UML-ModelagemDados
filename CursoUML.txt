<img src="https://media3.giphy.com/media/5wWf7HapUvpOumiXZRK/giphy.gif?cid=ecf05e47goyphgtkolcro36ik9dlg8e4xbtr2ngu4diw87xx&rid=giphy.gif&ct=g" style="zoom: 67%;" />

# 					Curso Modelagem de Dados - UML



Sess√£o 1: Introdu√ß√£o

## Sess√£o 2: Identifica√ß√£o de conceitos e atributos ü•∑

#### Modelo Conceitual: ele descreve a estrutura das informa√ß√µes cujo sistema ir√° gerenciar. Isso significa que as informa√ß√µes que o sistema gerenciar√° precisa estar organizada em entidades associadas entre elas. Ele divide informa√ß√µes em entidades e como elas est√£o armazenadas. 

#### Uma an√°lise de sistema visa resolver o problema que temos em quest√£o. Um modelo conceitual √© um modelo de dom√≠nio em n√≠vel de an√°lise pois pertence ao escopo do PROBLEMA e n√£o ao escopo da solu√ß√£o. Tamb√©m √© independente de paradigma e tecnologia, embora a UML seja um paradigma voltado a orienta√ß√£o a objetos. Um modelo de dom√≠nio descreve as entidades do dom√≠nio e as inter-rela√ß√µes entre elas.

![](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/conceitos,%20atributos%20e%20imagens.png?raw=true)

#### Um conceito √© qualquer entidade que tenha um significado para o sistema e que necessite de armazenamento de dados. Cliente, pedido, produto, fornecedor  etc. s√£o exemplos de conceitos. Ele deve ser uma entidade coesa, n√£o se deve misturar informa√ß√µes distintas em um mesmo conceito.

#### Atributos: s√£o as caracter√≠sticas dos atributos. N√£o pode ser multivalorado e nem composto, como no caso de um endere√ßo. Cada conceito deve ter um atributo identificador, ou uma chave prim√°ria. 

------

## Associa√ß√£o ü™¢

### Inst√¢ncia: Cada ocorr√™ncia do conceito. √â um objeto criado a partir da classe, se pegarmos uma compara√ß√£o com POO. 

#### Associa√ß√µes: √â um relacionamento est√°tico entre os conceitos: Exemplo - √â preciso criar  um sistema para armazenar infos de pessoas e carros e precisamos saber quem √© dono de cada carro. Neste exemplo temos conceitos, atributos e associa√ß√µes. Dessa forma:

![associa√ß√£o entre dois objs](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/associa%C3%A7%C3%B5es.png?raw=true)

------

### Multiplicidade de pap√©is:

#### Multiplicidade √© a quantidade m√≠nima e m√°xima de objetos que uma associa√ß√£o permite em cada um de seus pap√©is. Um exemplo √©: um carro pode ter quantos donos? Uma pessoa pode ter quantos carros? Um carro s√≥ pode ter um dono e uma pessoa pode ter 0 ou mais carros.

|   1    | exatamente 1 |
| :----: | ------------ |
|   2    | exatamente 2 |
|  0..1  | 0 a um       |
|  0..*  | 0 ou mais    |
|   *    | 0 ou mais    |
|  1..*  | 1 ou mais    |
|  2..*  | 2 ou mais    |
|  2..6  | de 2 a 6     |
|  2,7   | 2 ou 7       |
| 2,8..9 | 2 ou 8 a 9   |

#### Cada associa√ß√£o deve condizer com os conceitos a qual est√° ligada. Exemplo:

### `1 carro pode ter quantos respons√°veis?`

### `1 pessoa pode ser respons√°vel por quantos carros?`

#### `Um carro pode ter somente um respons√°vel, e uma pessoa pode ser respons√°vel por 0 a um carro` exemplo:

#### √â uma associa√ß√£o √© um para um, onde ambos os lados a associa√ß√£o m√°xima √© 1.

![um para um](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/um%20para%20um.png?raw=true)

`1 carro pode ter quantos motoristas?`

`1 pessoa pode dirigir quantos carros?`

`1 carro pod ter 0 ou mais motoristas e uma pessoa pode dirigir um ou mais carros`

### √â uma associa√ß√£o muitos para muitos, porque em ambos conceitos o m√°ximo s√£o v√°rios.

![muitos para muitos](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/muitos%20para%20muitos.png?raw=true)

#### Para descobrirmos as cardinalidades, devemos nos perguntar: Um conceito pode ter quantos do outro? E dessa forma temos nossa multiplicidade encontrada. 

------

## Associa√ß√£o Obrigat√≥ria ‚ö†Ô∏è

#### Uma associa√ß√£o obrigat√≥ria ocorre quando o conceito de multiplicidade m√≠nima se d√° maior que zero. O exemplo acima possui a associa√ß√£o de um carro com o dono √© obrigat√≥ria. 

## Conceito dependente‚ö†Ô∏è

#### Se d√° quando o conceito possui pelo menos uma associa√ß√£o obrigat√≥ria. Ainda no exemplo acima, para um carro ser cadastrado, necessariamente precisa ter uma pessoa para cumprir o papel de dono, caso contr√°rio o carro n√£o pode ser cadastrado no sistema. Isto √© um conceito dependente. J√° um conceito independente √© quando um conceito n√£o depende de outro para existir, como uma pessoa no sistema, que pode ou n√£o ser dona de um carro.

## Associa√ß√µes m√∫ltiplas‚ö†Ô∏è:

#### Anteriormente vimos exemplos de situa√ß√µes diversas envolvendo os mesmos dois conceitos. Dessa forma. uma associa√ß√£o m√∫ltipla ocorre quando os mesmos conceitos possuem associa√ß√µes diferentes, como no exemplo a seguir:

![associa√ß√£o m√∫ltipla](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/associa%C3%A7%C3%A3oMultipla.png?raw=true)

## Auto-Associa√ß√£o‚ö†Ô∏è:

#### Uma autoassocia√ß√£o se d√° quando um mesmo conceito se relaciona consigo mesmo.

![autoassocia√ß√£o](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/autoassocia%C3%A7%C3%A3o.png?raw=true)

## Exerc√≠cios:

Exerc√≠cio 1:

![exercicio1 resolvido](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/exercicio1.png?raw=true)



## Associa√ß√µes todo-parteüê∞:

#### Quando um conceito √© parte de outro que representa um todo. Desenhamos um diamante no lado do todo. 

#### Agrega√ß√£o: O conceito que √© a parte n√£o √© exclusivo e pode ser utilizado mais vezes. Ex.: Carro e pneu, diamante fica do lado do carro. Diamante branco, quando n√£o √© exclusivo.

![](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/associa%C3%A7%C3%A3o%20agrega%C3%A7%C3%A3o.png?raw=true)

#### Composi√ß√£o: Quando o conceito parte √© exclusivo e somente pode ser aplicado a um √∫nico conceito. Ex.: Estado e cidade. Diamante fica do lado do estado. Diamante preto, significa que √© exclusivo. Como √© uma rela√ß√£o exclusiva, a multiplicidade no lado do diamante sempre vai ser 1 ou 0..1. S√≥ √© usado quando algo √© parte de outra, um exemplo √© carro e pessoa, um carro em um sistema precisa de um dono, e se apagarmos a pessoa, o carro fica sem dono. Mas isso n√£o √© uma composi√ß√£o porque carro n√£o √© uma pessoa e n√£o faz parte de uma pessoa. 

![](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/associa%C3%A7%C3%A3o%20composi%C3%A7%C3%A3o.png?raw=true)

![](https://github.com/majuliah/Cursos_UML-ModelagemDados/blob/main/imgs/composi%C3%A7%C3%A3o%20errada.png?raw=true)

  

## Heran√ßa, Enumera√ß√µes e Tipos Primitivos

#### Enumera√ß√£o: Identificar os valores poss√≠veis de um conceito pelo n√∫mero. Deve ser representado por um diagrama a parte. √â um meio termo entre conceito e atributo porque quando for representado no diagrama, ser√° como se representa um atributo.

#### Tipos Primitivos: Devido a sua simplicidade n√£o deve ser modelado como um conceito comum no diagrama. Tipo simples estruturado que n√£o possui um ID por exemplo. 







